// This file was generated by counterfeiter
package cessnafakes

import (
	"sync"

	"code.cloudfoundry.org/garden"
	"github.com/concourse/atc/cessna"
	"github.com/concourse/baggageclaim"
)

type FakeWorker struct {
	GardenClientStub        func() garden.Client
	gardenClientMutex       sync.RWMutex
	gardenClientArgsForCall []struct{}
	gardenClientReturns     struct {
		result1 garden.Client
	}
	BaggageClaimClientStub        func() baggageclaim.Client
	baggageClaimClientMutex       sync.RWMutex
	baggageClaimClientArgsForCall []struct{}
	baggageClaimClientReturns     struct {
		result1 baggageclaim.Client
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWorker) GardenClient() garden.Client {
	fake.gardenClientMutex.Lock()
	fake.gardenClientArgsForCall = append(fake.gardenClientArgsForCall, struct{}{})
	fake.recordInvocation("GardenClient", []interface{}{})
	fake.gardenClientMutex.Unlock()
	if fake.GardenClientStub != nil {
		return fake.GardenClientStub()
	} else {
		return fake.gardenClientReturns.result1
	}
}

func (fake *FakeWorker) GardenClientCallCount() int {
	fake.gardenClientMutex.RLock()
	defer fake.gardenClientMutex.RUnlock()
	return len(fake.gardenClientArgsForCall)
}

func (fake *FakeWorker) GardenClientReturns(result1 garden.Client) {
	fake.GardenClientStub = nil
	fake.gardenClientReturns = struct {
		result1 garden.Client
	}{result1}
}

func (fake *FakeWorker) BaggageClaimClient() baggageclaim.Client {
	fake.baggageClaimClientMutex.Lock()
	fake.baggageClaimClientArgsForCall = append(fake.baggageClaimClientArgsForCall, struct{}{})
	fake.recordInvocation("BaggageClaimClient", []interface{}{})
	fake.baggageClaimClientMutex.Unlock()
	if fake.BaggageClaimClientStub != nil {
		return fake.BaggageClaimClientStub()
	} else {
		return fake.baggageClaimClientReturns.result1
	}
}

func (fake *FakeWorker) BaggageClaimClientCallCount() int {
	fake.baggageClaimClientMutex.RLock()
	defer fake.baggageClaimClientMutex.RUnlock()
	return len(fake.baggageClaimClientArgsForCall)
}

func (fake *FakeWorker) BaggageClaimClientReturns(result1 baggageclaim.Client) {
	fake.BaggageClaimClientStub = nil
	fake.baggageClaimClientReturns = struct {
		result1 baggageclaim.Client
	}{result1}
}

func (fake *FakeWorker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.gardenClientMutex.RLock()
	defer fake.gardenClientMutex.RUnlock()
	fake.baggageClaimClientMutex.RLock()
	defer fake.baggageClaimClientMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeWorker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cessna.Worker = new(FakeWorker)
