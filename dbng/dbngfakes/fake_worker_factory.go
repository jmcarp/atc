// This file was generated by counterfeiter
package dbngfakes

import (
	"sync"
	"time"

	"github.com/concourse/atc"
	"github.com/concourse/atc/dbng"
)

type FakeWorkerFactory struct {
	SaveWorkerStub        func(worker atc.Worker, ttl time.Duration) (*dbng.Worker, error)
	saveWorkerMutex       sync.RWMutex
	saveWorkerArgsForCall []struct {
		worker atc.Worker
		ttl    time.Duration
	}
	saveWorkerReturns struct {
		result1 *dbng.Worker
		result2 error
	}
	SaveTeamWorkerStub        func(worker atc.Worker, team *dbng.Team, ttl time.Duration) (*dbng.Worker, error)
	saveTeamWorkerMutex       sync.RWMutex
	saveTeamWorkerArgsForCall []struct {
		worker atc.Worker
		team   *dbng.Team
		ttl    time.Duration
	}
	saveTeamWorkerReturns struct {
		result1 *dbng.Worker
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWorkerFactory) SaveWorker(worker atc.Worker, ttl time.Duration) (*dbng.Worker, error) {
	fake.saveWorkerMutex.Lock()
	fake.saveWorkerArgsForCall = append(fake.saveWorkerArgsForCall, struct {
		worker atc.Worker
		ttl    time.Duration
	}{worker, ttl})
	fake.recordInvocation("SaveWorker", []interface{}{worker, ttl})
	fake.saveWorkerMutex.Unlock()
	if fake.SaveWorkerStub != nil {
		return fake.SaveWorkerStub(worker, ttl)
	} else {
		return fake.saveWorkerReturns.result1, fake.saveWorkerReturns.result2
	}
}

func (fake *FakeWorkerFactory) SaveWorkerCallCount() int {
	fake.saveWorkerMutex.RLock()
	defer fake.saveWorkerMutex.RUnlock()
	return len(fake.saveWorkerArgsForCall)
}

func (fake *FakeWorkerFactory) SaveWorkerArgsForCall(i int) (atc.Worker, time.Duration) {
	fake.saveWorkerMutex.RLock()
	defer fake.saveWorkerMutex.RUnlock()
	return fake.saveWorkerArgsForCall[i].worker, fake.saveWorkerArgsForCall[i].ttl
}

func (fake *FakeWorkerFactory) SaveWorkerReturns(result1 *dbng.Worker, result2 error) {
	fake.SaveWorkerStub = nil
	fake.saveWorkerReturns = struct {
		result1 *dbng.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkerFactory) SaveTeamWorker(worker atc.Worker, team *dbng.Team, ttl time.Duration) (*dbng.Worker, error) {
	fake.saveTeamWorkerMutex.Lock()
	fake.saveTeamWorkerArgsForCall = append(fake.saveTeamWorkerArgsForCall, struct {
		worker atc.Worker
		team   *dbng.Team
		ttl    time.Duration
	}{worker, team, ttl})
	fake.recordInvocation("SaveTeamWorker", []interface{}{worker, team, ttl})
	fake.saveTeamWorkerMutex.Unlock()
	if fake.SaveTeamWorkerStub != nil {
		return fake.SaveTeamWorkerStub(worker, team, ttl)
	} else {
		return fake.saveTeamWorkerReturns.result1, fake.saveTeamWorkerReturns.result2
	}
}

func (fake *FakeWorkerFactory) SaveTeamWorkerCallCount() int {
	fake.saveTeamWorkerMutex.RLock()
	defer fake.saveTeamWorkerMutex.RUnlock()
	return len(fake.saveTeamWorkerArgsForCall)
}

func (fake *FakeWorkerFactory) SaveTeamWorkerArgsForCall(i int) (atc.Worker, *dbng.Team, time.Duration) {
	fake.saveTeamWorkerMutex.RLock()
	defer fake.saveTeamWorkerMutex.RUnlock()
	return fake.saveTeamWorkerArgsForCall[i].worker, fake.saveTeamWorkerArgsForCall[i].team, fake.saveTeamWorkerArgsForCall[i].ttl
}

func (fake *FakeWorkerFactory) SaveTeamWorkerReturns(result1 *dbng.Worker, result2 error) {
	fake.SaveTeamWorkerStub = nil
	fake.saveTeamWorkerReturns = struct {
		result1 *dbng.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkerFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.saveWorkerMutex.RLock()
	defer fake.saveWorkerMutex.RUnlock()
	fake.saveTeamWorkerMutex.RLock()
	defer fake.saveTeamWorkerMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeWorkerFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dbng.WorkerFactory = new(FakeWorkerFactory)
