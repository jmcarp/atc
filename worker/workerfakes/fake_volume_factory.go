// This file was generated by counterfeiter
package workerfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/atc/worker"
	"github.com/concourse/baggageclaim"
)

type FakeVolumeFactory struct {
	BuildWithIndefiniteTTLStub        func(lager.Logger, baggageclaim.Volume) (worker.Volume, error)
	buildWithIndefiniteTTLMutex       sync.RWMutex
	buildWithIndefiniteTTLArgsForCall []struct {
		arg1 lager.Logger
		arg2 baggageclaim.Volume
	}
	buildWithIndefiniteTTLReturns struct {
		result1 worker.Volume
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVolumeFactory) BuildWithIndefiniteTTL(arg1 lager.Logger, arg2 baggageclaim.Volume) (worker.Volume, error) {
	fake.buildWithIndefiniteTTLMutex.Lock()
	fake.buildWithIndefiniteTTLArgsForCall = append(fake.buildWithIndefiniteTTLArgsForCall, struct {
		arg1 lager.Logger
		arg2 baggageclaim.Volume
	}{arg1, arg2})
	fake.recordInvocation("BuildWithIndefiniteTTL", []interface{}{arg1, arg2})
	fake.buildWithIndefiniteTTLMutex.Unlock()
	if fake.BuildWithIndefiniteTTLStub != nil {
		return fake.BuildWithIndefiniteTTLStub(arg1, arg2)
	} else {
		return fake.buildWithIndefiniteTTLReturns.result1, fake.buildWithIndefiniteTTLReturns.result2
	}
}

func (fake *FakeVolumeFactory) BuildWithIndefiniteTTLCallCount() int {
	fake.buildWithIndefiniteTTLMutex.RLock()
	defer fake.buildWithIndefiniteTTLMutex.RUnlock()
	return len(fake.buildWithIndefiniteTTLArgsForCall)
}

func (fake *FakeVolumeFactory) BuildWithIndefiniteTTLArgsForCall(i int) (lager.Logger, baggageclaim.Volume) {
	fake.buildWithIndefiniteTTLMutex.RLock()
	defer fake.buildWithIndefiniteTTLMutex.RUnlock()
	return fake.buildWithIndefiniteTTLArgsForCall[i].arg1, fake.buildWithIndefiniteTTLArgsForCall[i].arg2
}

func (fake *FakeVolumeFactory) BuildWithIndefiniteTTLReturns(result1 worker.Volume, result2 error) {
	fake.BuildWithIndefiniteTTLStub = nil
	fake.buildWithIndefiniteTTLReturns = struct {
		result1 worker.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeVolumeFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildWithIndefiniteTTLMutex.RLock()
	defer fake.buildWithIndefiniteTTLMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeVolumeFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ worker.VolumeFactory = new(FakeVolumeFactory)
